angular.module("myApp",["ngRoute","angularTrix","myApp.common","myApp.main","myApp.user"]).config(["$routeProvider","$locationProvider","$httpProvider",function(e,t,r){r.defaults.headers.get||(r.defaults.headers.get={}),r.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",r.defaults.headers.get["Cache-Control"]="no-cache",r.defaults.headers.get.Pragma="no-cache",e.when("/",{templateUrl:"template/testNgRoute-main.html",controller:"mainCtrl",resolve:{mainData:["testService",function(e){return e.getMain().then(function(e){return e.data}).catch(function(e){return e.data})}]}}).when("/user/:userId",{templateUrl:"template/testNgRoute-user.html",controller:"userCtrl",resolve:{userData:["testService",function(e){return e.getUser().then(function(e){return e.data})}]},reloadOnSearch:!1}).otherwise({redirectTo:"/"}),t.html5Mode(!1),t.hashPrefix(""),r.interceptors.push("httpInterceptor"),console.log("the angular app is start!")}]).run(["$rootScope","$templateCache",function(e,t){e.loading=!1,e.$on("$routeChangeStart",function(e,r,o){void 0!==o&&t.remove(o.templateUrl)}),e.$on("$routeUpdate",function(e,t,r){console.log(e),console.log(t),console.log(r)})}]),angular.element(document).ready(function(){angular.bootstrap(document,["myApp"])});
angular.module("myApp.common",[]),angular.module("myApp.main",["myApp.common"]),angular.module("myApp.user",["myApp.common"]);
angular.module("myApp.common").directive("myInputParse",function(){return{restrict:"EA",priority:-1,require:"?ngModel",link:function(e,r,t,n){n&&(console.log("myInputParse"),n.$parsers.push(function(e){var r=/^\d+\.?\d{0,2}$/,t=r.test(e),i=e.substring(0,e.length-1);return t?e:(n.$setViewValue(i),n.$render(),i)}))}}}).directive("companyEmailValidator",function(){var e=/^(?=.{1,254}$)(?=.{1,254}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;return{restrict:"EA",priority:-1,require:"?ngModel",link:function(r,t,n,i){i&&i.$validators.email&&(i.$validators.email=function(r,t){var n=r||t;return i.$isEmpty(n)||e.test(n)})}}}).directive("retainDecimal",function(){var e=/^\d+$/,r=/^\d+(\.)?\d{0,1}$/,t=/^\d+(\.)?\d{0,2}$/;return{restrict:"A",require:"?ngModel",link:function(n,i,a,s){s.$parsers.push(function(n){var i,u,l=a.retainDecimal,c=n.substring(0,n.length-1),o=n.charAt(n.length-1);switch(l){case"1":i=r.test(n),u=".0";break;case"2":i=t.test(n),u=".00";break;default:i=e.test(n),u=""}return i?"."==o?(s.$setViewValue(c+u),s.$render(),c+u):n:(s.$setViewValue(c),s.$render(),c)})}}});
angular.module("myApp.common").factory("httpInterceptor",["$sce","$rootScope","$timeout",function(n,e,t){var o,r;return{request:function(n){return o=(new Date).getTime(),e.loading=!0,n},response:function(n){return r=(new Date).getTime(),e.$evalAsync(function(){r-o>500?e.loading=!1:t(function(){e.loading=!1},500)}),n}}}]);
angular.module("myApp.common").factory("testService",["$http","$q",function(t,e){return{getMain:function(){return t.get("mock/testNgRoute-main.json")},getUser:function(){return t.get("mock/testNgRoute-user.json")},getRest:function(){return t.get("/restapi/login")}}}]);
angular.module("myApp.main").controller("mainCtrl",["$scope","$route","$routeParams","$location","mainData","$parse",function(a,t,n,e,m,l){a.pageName=m.pageName,a.myInputVal1="111",a.myInputVal2="",a.myInputVal3="",a.myInputVal4="",a.updateVal=function(){var t=l("'it is my test!the result is:' + myInputVal1");a.myInputValRes=t(a)}}]);
angular.module("myApp.user").controller("userCtrl",["$scope","$route","$routeParams","$location","userData",function(e,a,r,o,u){e.pageName=u.pageName,e.userId=r.userId,e.foo="please input!"}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
