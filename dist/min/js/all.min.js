angular.module("myApp",["ngRoute","angularTrix","myApp.common","myApp.main","myApp.user"]).config(["$routeProvider","$locationProvider","$httpProvider",function(e,t,r){r.defaults.headers.get||(r.defaults.headers.get={}),r.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",r.defaults.headers.get["Cache-Control"]="no-cache",r.defaults.headers.get.Pragma="no-cache",e.when("/",{templateUrl:"template/testNgRoute-main.html",controller:"mainCtrl",resolve:{mainData:["testService",function(e){return e.getMain().then(function(e){return e.data}).catch(function(e){return e.data})}]}}).when("/user/:userId",{templateUrl:"template/testNgRoute-user.html",controller:"userCtrl",resolve:{userData:["testService",function(e){return e.getUser().then(function(e){return e.data})}]},reloadOnSearch:!1}).otherwise({redirectTo:"/"}),t.html5Mode(!1),t.hashPrefix(""),r.interceptors.push("httpInterceptor"),console.log("the angular app is start!")}]).run(["$rootScope","$templateCache",function(e,t){e.loading=!1,e.$on("$routeChangeStart",function(e,r,o){void 0!==o&&t.remove(o.templateUrl)}),e.$on("$routeUpdate",function(e,t,r){console.log(e),console.log(t),console.log(r)})}]),angular.element(document).ready(function(){angular.bootstrap(document,["myApp"])});
angular.module("myApp.common",[]),angular.module("myApp.main",["myApp.common"]),angular.module("myApp.user",["myApp.common"]);
angular.module("myApp.common").directive("myInputParse",function(){return{restrict:"EA",priority:-1,require:"?ngModel",link:function(r,e,t,i){i&&(console.log("myInputParse"),i.$parsers.push(function(r){var e=/^\d+\.?\d{0,2}$/,t=e.test(r),n=r.substring(0,r.length-1);return t?r:(i.$setViewValue(n),i.$render(),n)}))}}}).directive("companyEmailValidator",function(){var r=/^(?=.{1,254}$)(?=.{1,254}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;return{restrict:"EA",priority:-1,require:"?ngModel",link:function(e,t,i,n){n&&n.$validators.email&&(n.$validators.email=function(e,t){var i=e||t;return n.$isEmpty(i)||r.test(i)})}}});
angular.module("myApp.common").factory("httpInterceptor",["$sce","$rootScope","$timeout",function(n,e,t){var o,r;return{request:function(n){return o=(new Date).getTime(),e.loading=!0,n},response:function(n){return r=(new Date).getTime(),e.$evalAsync(function(){r-o>500?e.loading=!1:t(function(){e.loading=!1},500)}),n}}}]);
angular.module("myApp.common").factory("testService",["$http","$q",function(t,e){return{getMain:function(){return t.get("mock/testNgRoute-main.json")},getUser:function(){return t.get("mock/testNgRoute-user.json")},getRest:function(){return t.get("/restapi/login")}}}]);
angular.module("myApp.main").controller("mainCtrl",["$scope","$route","$routeParams","$location","mainData","$parse",function(a,t,e,n,m,l){a.pageName=m.pageName,a.myInputVal="111",a.updateVal=function(){var t=l("'it is my test!the result is:' + myInputVal");a.myInputValRes=t(a)}}]);
angular.module("myApp.user").controller("userCtrl",["$scope","$route","$routeParams","$location","userData",function(e,a,r,o,u){e.pageName=u.pageName,e.userId=r.userId,e.foo="please input!"}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
