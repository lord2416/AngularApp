angular.module("myApp",["ngRoute","angularTrix","ui.tinymce","myApp.common","myApp.main","myApp.user"]).config(["$routeProvider","$locationProvider","$httpProvider",function(e,t,r){r.defaults.headers.get||(r.defaults.headers.get={}),r.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",r.defaults.headers.get["Cache-Control"]="no-cache",r.defaults.headers.get.Pragma="no-cache",e.when("/",{templateUrl:"template/testNgRoute-main.html",controller:"mainCtrl",resolve:{mainData:["testService",function(e){return e.getMain().then(function(e){return e.data}).catch(function(e){return e.data})}]}}).when("/user/:userId",{templateUrl:"template/testNgRoute-user.html",controller:"userCtrl",resolve:{userData:["testService",function(e){return e.getUser().then(function(e){return e.data})}]},reloadOnSearch:!1}).when("/tinymice",{templateUrl:"template/tinymice.html",controller:"tinymiceCtrl",reloadOnSearch:!1}).otherwise({redirectTo:"/"}),t.html5Mode(!1),t.hashPrefix(""),r.interceptors.push("httpInterceptor"),console.log("the angular app is start!")}]).run(["$rootScope","$templateCache",function(e,t){e.loading=!1,e.$on("$routeChangeStart",function(e,r,n){void 0!==n&&t.remove(n.templateUrl)}),e.$on("$routeUpdate",function(e,t,r){console.log(e),console.log(t),console.log(r)})}]),angular.element(document).ready(function(){angular.bootstrap(document,["myApp"])});
angular.module("myApp.common",[]),angular.module("myApp.main",["myApp.main.tinymice"]),angular.module("myApp.main.tinymice",["myApp.common","ui.tinymce"]),angular.module("myApp.user",["myApp.common"]);
angular.module("ui.tinymce",[]).value("uiTinymceConfig",{}).directive("uiTinymce",["$rootScope","$compile","$timeout","$window","$sce","uiTinymceConfig","uiTinymceService",function(e,t,n,i,r,o,u){return o=o||{},o.baseUrl&&(tinymce.baseURL=o.baseUrl),{require:["ngModel","^?form"],priority:599,link:function(c,a,s,d){function f(e){e?(m(),v&&v.getBody().setAttribute("contenteditable",!1)):(m(),v&&!v.settings.readonly&&v.getDoc()&&v.getBody().setAttribute("contenteditable",!0))}function m(){v||(v=tinymce.get(s.id))}if(i.tinymce){var l,v,$=d[0],g=d[1]||null,y={debounce:!0},b=function(t){var n=t.getContent({format:y.format}).trim();n=r.trustAsHtml(n),$.$setViewValue(n),e.$$phase||c.$digest()},p=u.getUniqueId();s.$set("id",p),l={},angular.extend(l,c.$eval(s.uiTinymce));var h=function(e){var t;return function(e){n.cancel(t),t=n(function(){return function(e){e.isDirty()&&(e.save(),b(e))}(e)},400)}}(),U={setup:function(t){t.on("init",function(){$.$render(),$.$setPristine(),$.$setUntouched(),g&&g.$setPristine()}),t.on("ExecCommand change NodeChange ObjectResized",function(){if(!y.debounce)return t.save(),void b(t);h(t)}),t.on("blur",function(){a[0].blur(),$.$setTouched(),e.$$phase||c.$digest()}),t.on("remove",function(){a.remove()}),o.setup&&o.setup(t,{updateView:b}),l.setup&&l.setup(t,{updateView:b})},format:l.format||"html",selector:"#"+s.id};angular.extend(y,o,l,U),n(function(){y.baseURL&&(tinymce.baseURL=y.baseURL);var e=tinymce.init(y);e&&"function"==typeof e.then?e.then(function(){f(c.$eval(s.ngDisabled))}):f(c.$eval(s.ngDisabled))}),$.$formatters.unshift(function(e){return e?r.trustAsHtml(e):""}),$.$parsers.unshift(function(e){return e?r.getTrustedHtml(e):""}),$.$render=function(){m();var e=$.$viewValue?r.getTrustedHtml($.$viewValue):"";v&&v.getDoc()&&(v.setContent(e),v.fire("change"))},s.$observe("disabled",f);var T=c.$on("$tinymce:refresh",function(e,n){var i=s.id;if(angular.isUndefined(n)||n===i){var r=a.parent(),o=a.clone();o.removeAttr("id"),o.removeAttr("style"),o.removeAttr("aria-hidden"),tinymce.execCommand("mceRemoveEditor",!1,i),r.append(t(o)(c)),T()}});c.$on("$destroy",function(){m(),v&&(v.remove(),v=null)})}}}}]).service("uiTinymceService",[function(){return new function(){var e=0;return{getUniqueId:function(){return"ui-tinymce-"+ ++e}}}}]);
angular.module("myApp.common").directive("myInputParse",function(){return{restrict:"EA",priority:-1,require:"?ngModel",link:function(e,r,t,n){n&&(console.log("myInputParse"),n.$parsers.push(function(e){var r=/^\d+\.?\d{0,2}$/,t=r.test(e),i=e.substring(0,e.length-1);return t?e:(n.$setViewValue(i),n.$render(),i)}))}}}).directive("companyEmailValidator",function(){var e=/^(?=.{1,254}$)(?=.{1,254}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;return{restrict:"EA",priority:-1,require:"?ngModel",link:function(r,t,n,i){i&&i.$validators.email&&(i.$validators.email=function(r,t){var n=r||t;return i.$isEmpty(n)||e.test(n)})}}}).directive("retainDecimal",function(){var e=/^\d+$/,r=/^\d+(\.)?\d{0,1}$/,t=/^\d+(\.)?\d{0,2}$/;return{restrict:"A",require:"?ngModel",link:function(n,i,a,s){s.$parsers.push(function(n){var i,u,l=a.retainDecimal,c=n.substring(0,n.length-1),o=n.charAt(n.length-1);switch(l){case"1":i=r.test(n),u=".0";break;case"2":i=t.test(n),u=".00";break;default:i=e.test(n),u=""}return i?"."==o?(s.$setViewValue(c+u),s.$render(),c+u):n:(s.$setViewValue(c),s.$render(),c)})}}});
angular.module("myApp.common").factory("httpInterceptor",["$sce","$rootScope","$timeout",function(n,e,t){var o,r;return{request:function(n){return o=(new Date).getTime(),e.loading=!0,n},response:function(n){return r=(new Date).getTime(),e.$evalAsync(function(){r-o>500?e.loading=!1:t(function(){e.loading=!1},500)}),n}}}]);
angular.module("myApp.common").factory("testService",["$http","$q",function(t,e){return{getMain:function(){return t.get("mock/testNgRoute-main.json")},getUser:function(){return t.get("mock/testNgRoute-user.json")},getRest:function(){return t.get("/restapi/login")}}}]);
angular.module("myApp.main").controller("mainCtrl",["$scope","$route","$routeParams","$location","mainData","$parse",function(a,t,n,e,m,l){a.pageName=m.pageName,a.myInputVal1="111",a.myInputVal2="",a.myInputVal3="",a.myInputVal4="",a.updateVal=function(){var t=l("'it is my test!the result is:' + myInputVal1");a.myInputValRes=t(a)}}]);
angular.module("myApp.main.tinymice").controller("tinymiceCtrl",["$scope","$route","$routeParams","$location","$sce",function(t,i,e,n,a){var l=this;t.setting={inline:!1,plugins:"advlist autolink lists link image charmap print preview anchor",readonly:"view"===t.operate,skin:"lightgray",theme:"modern",min_height:200,max_height:500},this.updateHtml=function(){l.tinymceHtml=a.trustAsHtml(l.tinymce)}}]);
angular.module("myApp.user").controller("userCtrl",["$scope","$route","$routeParams","$location","userData",function(e,a,r,o,u){e.pageName=u.pageName,e.userId=r.userId,e.foo="please input!"}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
