angular.module("myApp",["ngRoute","angularTrix","angularify.semantic.dropdown","ui.tinymce","myApp.common","myApp.main","myApp.user"]).config(["$routeProvider","$locationProvider","$httpProvider",function(e,t,r){r.defaults.headers.get||(r.defaults.headers.get={}),r.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",r.defaults.headers.get["Cache-Control"]="no-cache",r.defaults.headers.get.Pragma="no-cache",e.when("/",{templateUrl:"template/testNgRoute-main.html",controller:"mainCtrl",resolve:{mainData:["testService",function(e){return e.getMain().then(function(e){return e.data}).catch(function(e){return e.data})}]}}).when("/user/:userId",{templateUrl:"template/testNgRoute-user.html",controller:"userCtrl",resolve:{userData:["testService",function(e){return e.getUser().then(function(e){return e.data})}]},reloadOnSearch:!1}).when("/tinymice",{templateUrl:"template/tinymice.html",controller:"tinymiceCtrl",reloadOnSearch:!1}).when("/dropdown",{templateUrl:"template/dropdown.html",controller:"TestDropDownCtrl",reloadOnSearch:!1}).otherwise({redirectTo:"/"}),t.html5Mode(!1),t.hashPrefix(""),r.interceptors.push("httpInterceptor"),console.log("the angular app is start!")}]).run(["$rootScope","$templateCache",function(e,t){e.loading=!1,e.$on("$routeChangeStart",function(e,r,o){void 0!==o&&t.remove(o.templateUrl)}),e.$on("$routeUpdate",function(e,t,r){console.log(e),console.log(t),console.log(r)})}]),angular.element(document).ready(function(){angular.bootstrap(document,["myApp"])});
angular.module("myApp.common",[]),angular.module("myApp.main",["myApp.main.tinymice","myApp.main.dropdown"]),angular.module("myApp.main.tinymice",["myApp.common","ui.tinymce"]),angular.module("myApp.main.dropdown",["myApp.common","angularify.semantic.dropdown"]),angular.module("myApp.user",["myApp.common"]);
angular.module("ui.tinymce",[]).value("uiTinymceConfig",{}).directive("uiTinymce",["$rootScope","$compile","$timeout","$window","$sce","uiTinymceConfig","uiTinymceService",function(e,t,n,i,r,o,u){return o=o||{},o.baseUrl&&(tinymce.baseURL=o.baseUrl),{require:["ngModel","^?form"],priority:599,link:function(c,a,s,d){function f(e){e?(m(),v&&v.getBody().setAttribute("contenteditable",!1)):(m(),v&&!v.settings.readonly&&v.getDoc()&&v.getBody().setAttribute("contenteditable",!0))}function m(){v||(v=tinymce.get(s.id))}if(i.tinymce){var l,v,$=d[0],g=d[1]||null,y={debounce:!0},b=function(t){var n=t.getContent({format:y.format}).trim();n=r.trustAsHtml(n),$.$setViewValue(n),e.$$phase||c.$digest()},p=u.getUniqueId();s.$set("id",p),l={},angular.extend(l,c.$eval(s.uiTinymce));var h=function(e){var t;return function(e){n.cancel(t),t=n(function(){return function(e){e.isDirty()&&(e.save(),b(e))}(e)},400)}}(),U={setup:function(t){t.on("init",function(){$.$render(),$.$setPristine(),$.$setUntouched(),g&&g.$setPristine()}),t.on("ExecCommand change NodeChange ObjectResized",function(){if(!y.debounce)return t.save(),void b(t);h(t)}),t.on("blur",function(){a[0].blur(),$.$setTouched(),e.$$phase||c.$digest()}),t.on("remove",function(){a.remove()}),o.setup&&o.setup(t,{updateView:b}),l.setup&&l.setup(t,{updateView:b})},format:l.format||"html",selector:"#"+s.id};angular.extend(y,o,l,U),n(function(){y.baseURL&&(tinymce.baseURL=y.baseURL);var e=tinymce.init(y);e&&"function"==typeof e.then?e.then(function(){f(c.$eval(s.ngDisabled))}):f(c.$eval(s.ngDisabled))}),$.$formatters.unshift(function(e){return e?r.trustAsHtml(e):""}),$.$parsers.unshift(function(e){return e?r.getTrustedHtml(e):""}),$.$render=function(){m();var e=$.$viewValue?r.getTrustedHtml($.$viewValue):"";v&&v.getDoc()&&(v.setContent(e),v.fire("change"))},s.$observe("disabled",f);var T=c.$on("$tinymce:refresh",function(e,n){var i=s.id;if(angular.isUndefined(n)||n===i){var r=a.parent(),o=a.clone();o.removeAttr("id"),o.removeAttr("style"),o.removeAttr("aria-hidden"),tinymce.execCommand("mceRemoveEditor",!1,i),r.append(t(o)(c)),T()}});c.$on("$destroy",function(){m(),v&&(v.remove(),v=null)})}}}}]).service("uiTinymceService",[function(){return new function(){var e=0;return{getUniqueId:function(){return"ui-tinymce-"+ ++e}}}}]);
angular.module("myApp.common").directive("myInputParse",function(){return{restrict:"EA",priority:-1,require:"?ngModel",link:function(e,t,n,i){i&&(console.log("myInputParse"),i.$parsers.push(function(e){var t=/^\d+\.?\d{0,2}$/,n=t.test(e),r=e.substring(0,e.length-1);return n?e:(i.$setViewValue(r),i.$render(),r)}))}}}).directive("companyEmailValidator",function(){var e=/^(?=.{1,254}$)(?=.{1,254}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;return{restrict:"EA",priority:-1,require:"?ngModel",link:function(t,n,i,r){r&&r.$validators.email&&(r.$validators.email=function(t,n){var i=t||n;return r.$isEmpty(i)||e.test(i)})}}}).directive("retainDecimal",function(){var e=/^\d+$/,t=/^\d+(\.)?\d{0,1}$/,n=/^\d+(\.)?\d{0,2}$/;return{restrict:"A",require:"?ngModel",link:function(i,r,a,o){o.$parsers.push(function(i){var r,d,s=a.retainDecimal,l=i.substring(0,i.length-1),c=i.charAt(i.length-1);switch(s){case"1":r=t.test(i),d=".0";break;case"2":r=n.test(i),d=".00";break;default:r=e.test(i),d=""}return r?"."==c?(o.$setViewValue(l+d),o.$render(),l+d):i:(o.$setViewValue(l),o.$render(),l)})}}}).directive("searchSelect",["$sce",function(e){return{restrict:"EA",replace:!0,transclude:!0,require:"?ngModel",scope:{options:"=",name:"@"},template:'<div class="ui fluid search selection dropdown upward">\t\t\t\t<input type="hidden" name="{{name}}" ng-model="selectedValue">\t\t\t\t<i class="dropdown icon"></i>\t\t\t\t<div class="default text" ng-bind="selectedValue"></div>\t\t\t  \t<div class="menu transition hidden">\t\t\t    \t<div class="item" data-index="{{option.index}}" data-value="{{option.index}}" ng-repeat = "option in options" ng-bind="option.item"></div>\t\t\t  \t</div>\t\t\t</div>',link:function(e,t,n,i){t.dropdown({fullTextSearch:!0,onChange:function(t,n,r){e.$apply(function(){i.$setViewValue(t)})}}),i.$render=function(){console.log("it is $render"),t.dropdown("set selected","3")},n.$observe("ngModel",function(e){console.log(e)})}}}]);
angular.module("myApp.common").factory("httpInterceptor",["$sce","$rootScope","$timeout",function(n,e,t){var o,r;return{request:function(n){return o=(new Date).getTime(),e.loading=!0,n},response:function(n){return r=(new Date).getTime(),e.$evalAsync(function(){r-o>500?e.loading=!1:t(function(){e.loading=!1},500)}),n}}}]);
angular.module("myApp.common").factory("testService",["$http","$q",function(t,e){return{getMain:function(){return t.get("mock/testNgRoute-main.json")},getUser:function(){return t.get("user/1")},getRest:function(){return t.get("/restapi/login")}}}]);
angular.module("myApp.main.dropdown").controller("TestDropDownCtrl",["$scope","$route","$routeParams","$location","$sce",function(o,e,t,m,i){o.dropdown_model="item3",o.dropdown_repeat_model="item1",o.dropdown_items=["item1","item2","item3","item4"],o.dropdown_key_value_model="",o.dropdown_key_value_items={item1:"Cool item 1",item2:"Cool item 2",item3:"Cool item 3",item4:"Cool item 4"}}]);
angular.module("myApp.main").controller("mainCtrl",["$scope","$route","$routeParams","$location","mainData","$parse",function(e,t,i,n,s,a){e.pageName=s.pageName,e.myInputVal1="111",e.myInputVal2="",e.myInputVal3="",e.myInputVal4="",e.selectVal="",e.parentOptions=[{item:"Arabic Chinese",select:!0,index:1},{item:"Chinese ",select:!1,index:2},{item:"Dutch",select:!1,index:3},{item:"English",select:!1,index:4},{item:"French",select:!1,index:5},{item:"German",select:!1,index:6},{item:"Greek",select:!1,index:7},{item:"Hungarian",select:!1,index:8},{item:"Italian",select:!1,index:9},{item:"Japanese",select:!1,index:10},{item:"Korean",select:!1,index:11},{item:"Lithuanian",select:!1,index:12},{item:"Persian",select:!1,index:13},{item:"Polish",select:!1,index:14},{item:"Portuguese",select:!1,index:15},{item:"Russian",select:!1,index:16},{item:"Spanish",select:!1,index:17},{item:"Swedish",select:!1,index:18},{item:"Turkish",select:!1,index:19},{item:"Vietnamese",select:!1,index:20}],e.updateVal=function(){var t=a("'it is my test!the result is:' + myInputVal1");e.myInputValRes=t(e)}}]);
angular.module("myApp.main.tinymice").controller("tinymiceCtrl",["$scope","$route","$routeParams","$location","$sce",function(t,i,e,n,a){var l=this;t.setting={inline:!1,plugins:"advlist autolink lists link image charmap print preview anchor",readonly:"view"===t.operate,skin:"lightgray",theme:"modern",min_height:200,max_height:500},this.updateHtml=function(){l.tinymceHtml=a.trustAsHtml(l.tinymce)}}]);
angular.module("myApp.user").controller("userCtrl",["$scope","$route","$routeParams","$location","userData",function(e,o,t,a,s){e.pageName=s.pageName,e.userId=t.userId,e.foo="please input!";var l=this;console.log(this),console.log(l),this.update=function(){console.log("this update")},this.delete=function(){console.log("this update")},e.exportFile=function(){var o=e.type;e.searchFieldsData}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
